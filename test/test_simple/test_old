#include <cstdio>
#include <cd.h>

using namespace cd;

#ifndef KMASK
#define KMASK kRef
//#define KMASK kCopy
#endif

int main(){

  CDErrT cd_err;
  int i, j;
  
  double *x = new double[100];
  for( i=0; i<100; i++ ) x[i] = i;

  CDHandle *root_cd = CD_Init( 0, 0 );
  CD_Begin( root_cd );
  root_cd->Preserve( x, 100 * sizeof(double), kCopy, "x", "x" );
  printf("Top of root_cd x=%f \n", x[0] );

  CDHandle* child1_cd = root_cd->Create("Child1", kStrict, 0, 0, &cd_err );
  {
    CD_Begin( child1_cd );
    child1_cd->Preserve( x, 100 * sizeof(double), KMASK, "x", "x" );
    printf("Within child1_cd. x=%f \n", x[0] );

    j=0;
    CDHandle* child2_cd = root_cd->Create("Child2", kStrict, 0, 0, &cd_err );
//    CDHandle* child2_cd = child1_cd->Create("Child2", kStrict, 0, 0, &cd_err );
    {
      CD_Begin( child2_cd );
      //error appears on second call (kRexec)
      child2_cd->Preserve( x, 100 * sizeof(double), KMASK, "x", "x" );
      printf("Within child2_cd. x=%f \n", x[0] );

      if( j==0 ){
      	x[0]=2.0;
      	printf("Created Error within child2 domain. x=%f \n", x[0] );
      }
    
      printf("j=%d   x=%f   \n", j, x[0] );
    
      j++;
      child2_cd->CDAssert( x[0]==0.0 );
      CD_Complete( child2_cd );
    }
    child2_cd->Destroy();

    CD_Complete( child1_cd );
  }
  child1_cd->Destroy();

  root_cd->CDAssert( x[0] == 0 );
  CD_Complete( root_cd );

//  root_cd->Destroy();
  CD_Finalize();

  delete [] x;

  return 0;
}//main

