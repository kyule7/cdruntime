Index: include/libcr.h
===================================================================
RCS file: /var/local/cvs/lbnl_cr/include/libcr.h,v
retrieving revision 1.83.4.2
diff -u -r1.83.4.2 libcr.h
--- include/libcr.h	18 Feb 2009 03:41:26 -0000	1.83.4.2
+++ include/libcr.h	3 Dec 2013 21:04:39 -0000
@@ -1093,6 +1093,78 @@
 extern cr_hook_fn_t
 cr_register_hook(cr_hook_event_t event, cr_hook_fn_t hook_fn); 
 
+// cr_mem_excl()
+// cr_mem_incl()
+//
+// Memory exclusion hint and unhint.
+//
+// Normally BLCR considers all memory mapped into the virtual address space
+// to be a candidate for inclusion in the checkpoint.  Certain regions are
+// excluded by default when they correspond to pages mapped from files (such
+// as the executable and shared libraries).  In that case the restore from a
+// checkpoint maps the file rather than reading the content of the memory from
+// the checkpoint context file.  Use of cr_mem_excl() provides an additional
+// mechanism to inform BLCR that it may exclude certain ranges of memory from
+// the checkpoint.  Unlike the case of mapped files, the post-restart contents
+// of memory excluded by cr_mem_excl() are not defined.
+//
+// Calling cr_mem_excl(addr, len) is a *hint* to BLCR that the given range
+// of memory may safely be excluded from the checkpoint, and that the caller
+// is prepared to deal with the undefined contents of this memory at restart.
+// BLCR is permitted to disregard such hints and therfore this should not be
+// used to prevent "sensitive" information such as cryptographic keys from
+// becoming part of the checkpoint.
+//
+// Calling cr_mem_incl(addr, len) cancels the exclusion hint provided by
+// earlier calls (if any) to cr_mem_excl() for the given range of memory.
+// There is no requirement that the arguments match those of any earlier call
+// to cr_mem_excl().  It is legal (though pointless) to call cr_mem_incl()
+// for a range of memory that has never been named by a call to cr_mem_excl().
+//
+// For any given byte of memory, the current "exclude" or "include" state is
+// that given by the most recent cr_mem_excl() or cr_mem_incl() call to name
+// that byte in its range.
+//
+// Example 1:
+//     cr_mem_excl(p, sizeof(*p));
+//     cr_mem_excl(p, sizeof(*p));
+//     cr_mem_incl(p, sizeof(*p));
+//   ensures inclusion of the object named by 'p'.
+// Example 2:
+//     cr_mem_incl(p, sizeof(*p));
+//     cr_mem_incl(p, sizeof(*p));
+//     cr_mem_excl(p, sizeof(*p));
+//   results in the possible exclusion of the object named by 'p'.
+// Example 3:
+//     cr_mem_excl(&a[0], 3 * sizeof(a[0]));
+//     cr_mem_incl(&a[1], sizeof(a[1]));
+//   results in the possible exclusion of 'a[0]' and 'a[2]', but ensures that
+//   'a[1]' will be included in the checkpoint.
+//
+// NOTE: While exclusion hints are tracked by byte granularity, the current
+// application of the hints operates on page granularity.  So, only if all
+// bytes of a given page are marked for possible exclusion will any savings
+// be obtained.  For this reason, it is advisable to limit one's use of the
+// memory exclusion hints to ranges of memory with length of one page or more,
+// or to consecutive ranges the union of which may include full pages.
+//
+// Return 0 on success, -1 on failure.
+//
+// Most likely errno values when returning -1:
+// CR_ENOINIT	Calling thread has not called cr_init()
+// ERANGE	The value of (addr+len-1) would overflow
+//
+// The results are undefined if these functions are called for a range that
+// includes memory that is not part of the address space.
+//
+// These functions are thread-safe.
+// These functions are not reentrant - do not call them from signal context.
+//
+extern int
+cr_mem_excl(void *addr, size_t len);
+extern int
+cr_mem_incl(void *addr, size_t len);
+
 // cr_hold_ctrl()
 // THIS FUNCTION IS EXPERIMENTAL: USE AT YOUR OWN RISK
 //
Index: libcr/Makefile.am
===================================================================
RCS file: /var/local/cvs/lbnl_cr/libcr/Makefile.am,v
retrieving revision 1.31.4.2
diff -u -r1.31.4.2 Makefile.am
--- libcr/Makefile.am	4 Jan 2013 04:26:33 -0000	1.31.4.2
+++ libcr/Makefile.am	3 Dec 2013 21:04:39 -0000
@@ -15,6 +15,7 @@
 
 libcr_la_SOURCES = \
 		$(libcr_ftb_sources) \
+		cr_memexcl.c\
 		cr_async.c\
 		cr_core.c\
 		cr_cs.c\
Index: libcr/cr_core.c
===================================================================
RCS file: /var/local/cvs/lbnl_cr/libcr/cr_core.c,v
retrieving revision 1.206.6.2
diff -u -r1.206.6.2 cr_core.c
--- libcr/cr_core.c	18 Feb 2009 01:23:15 -0000	1.206.6.2
+++ libcr/cr_core.c	3 Dec 2013 21:04:39 -0000
@@ -63,6 +63,10 @@
 // Table of hooks
 volatile cr_hook_fn_t cri_hook_tbl[CR_NUM_HOOKS];
 
+// For efficient page arithmetic
+int cri_pagesize, cri_pageshift;
+uintptr_t cri_pagemask;
+
 //
 // Private functions
 //
@@ -424,6 +428,26 @@
 // Library Initialization
 //
 
+// cri_do_init()
+//
+// Called by the main constructor
+static void cri_do_init(void)
+{
+    //
+    // Initialize some global vars
+    //
+    cri_pagesize = sysconf(_SC_PAGESIZE);
+    if (cri_pagesize < 1) {
+	CRI_ABORT("sysconf(_SC_PAGESIZE) failed");
+    } else {
+	uintptr_t tmp = cri_pagesize - 1;
+	cri_pagemask = ~tmp;
+	for (cri_pageshift = 0; tmp; ++cri_pageshift) tmp >>= 1;
+    }
+}
+
+// Include the code shared by all the libraries.
+#define CR_LIBINIT_FN  cri_do_init
 #define CR_LINK_ME_VAR cr_link_me
 #define CR_SIG_HANDLER cri_sig_handler
 #define CR_SIG_IS_FULL 1
Index: libcr/cr_libinit.c
===================================================================
RCS file: /var/local/cvs/lbnl_cr/libcr/cr_libinit.c,v
retrieving revision 1.14.6.5
diff -u -r1.14.6.5 cr_libinit.c
--- libcr/cr_libinit.c	21 Dec 2012 07:21:25 -0000	1.14.6.5
+++ libcr/cr_libinit.c	3 Dec 2013 21:04:39 -0000
@@ -137,6 +137,13 @@
     //
     LIBCR_TRACE_INIT();
 
+#ifdef CR_LIBINIT_FN
+    //
+    // Initialize other portions of the library
+    //
+    CR_LIBINIT_FN();
+#endif /* CR_LIBINIT_FN */
+
 #ifndef LIBCR_SIGNAL_ONLY
     //
     // Initialize pthread-dependent parts if appropriate
Index: libcr/cr_memexcl.c
===================================================================
RCS file: libcr/cr_memexcl.c
diff -N libcr/cr_memexcl.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libcr/cr_memexcl.c	3 Dec 2013 21:04:39 -0000
@@ -0,0 +1,284 @@
+/* 
+ * Berkeley Lab Checkpoint/Restart (BLCR) for Linux is Copyright (c)
+ * 2009, The Regents of the University of California, through Lawrence
+ * Berkeley National Laboratory (subject to receipt of any required
+ * approvals from the U.S. Dept. of Energy).  All rights reserved.
+ *
+ * Portions may be copyrighted by others, as may be noted in specific
+ * copyright notices within specific files.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ * $Id: cr_memexcl.c,v 1.5 2009/02/12 03:35:21 phargrov Exp $
+ */
+
+#include "cr_private.h"
+
+//
+// Private data types
+//
+
+// Currenty using simple linked list
+typedef struct cr_memexcl_node_s {
+    struct cr_memexcl_node_s *next;
+    uintptr_t start, end;
+} cr_memexcl_node_t;
+
+struct cr_memexcl_s {
+    pthread_mutex_t   lock;
+    cr_memexcl_node_t *head;
+};
+
+typedef int (*cri_memexcl_fn)(struct cr_memexcl_s *, uintptr_t, uintptr_t);
+
+
+//
+// Private data
+//
+
+static struct cr_memexcl_s cri_memexcl = {PTHREAD_MUTEX_INITIALIZER, NULL}; // The one shared instance
+
+//
+// Private functions
+//
+
+#ifndef MAX
+  #define MAX(a,b) (((a)<(b))?(b):(a))
+#endif
+#ifndef MIN
+  #define MIN(a,b) (((a)>(b))?(b):(a))
+#endif
+
+static int
+cri_memexcl_pack(uintptr_t *p, struct cr_memexcl_s *x) {
+    cr_memexcl_node_t *curr;
+    uintptr_t offset = 0;
+    int count = 0;
+  
+    curr = x->head;
+    while (curr) {
+	uintptr_t start = (curr->start + offset + ~cri_pagemask) & cri_pagemask; // Round UP
+	uintptr_t end   = curr->end & cri_pagemask; // Round DOWN
+
+	if (start < end) {
+	    uintptr_t pages = (end - start) >> cri_pageshift;
+	    uintptr_t tmp = MIN(pages, cri_pagesize);
+
+	    count++;
+	    if (p) { // encode (pages - 1) in lower bits
+		*(p++) = start | (tmp - 1);
+	    }
+	    
+	    if (tmp != pages) {
+		offset += tmp << cri_pageshift;
+		continue;
+	    }
+	}
+	offset = 0;
+	curr = curr->next;
+    }
+    return count;
+}
+
+static int
+cri_memexcl_add(struct cr_memexcl_s *x, uintptr_t start, uintptr_t end) {
+    cr_memexcl_node_t *prev = NULL;
+    cr_memexcl_node_t *next = x->head;
+    cr_memexcl_node_t *curr = NULL;
+
+    while (next && next->start <= start) {
+	prev = next;
+	next = next->next;
+    }
+    //CRI_ASSERT(!prev || prev->start <= start);
+    //CRI_ASSERT(!next || start < next->start);
+    if (prev && start <= prev->end + 1) { // Merge w/ prev
+	end = MAX(end, prev->end);
+	curr = prev;
+    } else if (next && next->start <= end + 1) { // Merge w/ next
+	end = MAX(end, next->end);
+	curr = next;
+	curr->start = start;
+	next = next->next;
+    } else { // New
+	curr = malloc(sizeof(*curr));
+	if (!curr) return ENOMEM;
+	curr->start = start;
+	if (prev) {
+	    prev->next = curr;
+	} else {
+	    x->head = curr;
+	}
+   }
+   while (next && next->start <= end + 1) { // Merge w/ following entries
+	cr_memexcl_node_t *tmp = next->next;
+	end = MAX(end, next->end);
+	free(next);
+	next = tmp;
+   }
+   curr->end  = end;
+   curr->next = next;
+   return 0;
+}
+	
+static int
+cri_memexcl_del(struct cr_memexcl_s *x, uintptr_t start, uintptr_t end) {
+    cr_memexcl_node_t *prev = NULL;
+    cr_memexcl_node_t *next = x->head;
+
+    while (next && next->start < start) {
+	prev = next;
+	next = next->next;
+    }
+    //CRI_ASSERT(!prev || prev->start < start);
+    //CRI_ASSERT(!next || start <= next->start);
+    if (!prev) {
+	// No split or trim
+    } else if (end < prev->end) { // Split prev
+	cr_memexcl_node_t *tmp = malloc(sizeof(*tmp));
+	if (!tmp) return ENOMEM;
+	tmp->start = end + 1;
+	tmp->end = prev->end;
+	tmp->next = next;
+	prev->next = tmp;
+	prev->end = start - 1;
+	return 0; // short circuit
+    } else if (start < prev->end) { // Trim prev
+	prev->end = start - 1;
+    }
+    while (next && next->end <= end) { // Remove covered following
+	cr_memexcl_node_t *tmp = next->next;
+	free(next);
+	next = tmp;
+    }
+    if (prev) {
+	prev->next = next;
+    } else {
+	x->head = next;
+    }
+    if (next && next->start <= end) { // Trim next
+	next->start = end + 1;
+    }
+    return 0;
+}
+
+int cri_memexcl_op(cri_memexcl_fn op, void *addr, size_t len) {
+  cri_info_t *info = CRI_INFO_OR_RETURN(-1);	// thread-specific
+  uintptr_t start, end;
+  int retval = 0;
+
+  if (!len) goto out; // trivial success
+
+  start = (uintptr_t)addr;
+  end = start + (len - 1);
+
+  retval = -1;
+  errno = ERANGE;
+  if (end < start) goto out; // Overflow!
+
+  // We can't handle the max address, so trim it off
+  if (start == ~(0UL)) start -= 1;
+  if (end == ~(0UL)) end -= 1;
+
+  (void)cri_do_enter(info, CRI_ID_INTERNAL);
+  pthread_mutex_lock(&cri_memexcl.lock);
+  retval = (*op)(&cri_memexcl, start, end);
+  pthread_mutex_unlock(&cri_memexcl.lock);
+  cri_do_leave(info, CRI_ID_INTERNAL);
+
+  if (retval) {
+    errno = retval;
+    retval = -1;
+  }
+out:
+  return retval;
+}
+
+//
+// Public functions
+//
+
+int cr_mem_excl(void *addr, size_t len) {
+  return cri_memexcl_op(&cri_memexcl_add, addr, len);
+}
+
+int cr_mem_incl(void *addr, size_t len) {
+  return cri_memexcl_op(&cri_memexcl_del, addr, len);
+}
+
+int cri_mem_dump(uintptr_t **ptr) {
+  int count;
+
+  pthread_mutex_lock(&cri_memexcl.lock);
+  count = cri_memexcl_pack(NULL, &cri_memexcl);
+  if (count > 0) {
+    uintptr_t *p = malloc(count * sizeof(uintptr_t));
+    if (!p) {
+      count = -ENOMEM;
+    } else {
+      cri_memexcl_pack(p, &cri_memexcl);
+      *ptr = p;
+    }
+  }
+  pthread_mutex_unlock(&cri_memexcl.lock);
+
+  return count;
+}
+
+// Testing...
+#if 0
+static void dump(struct cr_memexcl_s *x)
+{
+    cr_memexcl_node_t *p = x->head;
+    while (p) {
+	printf("%p -> %p\n", (void*)p->start, (void*)p->end);
+	p = p->next;
+    }
+    printf("\n");
+}
+
+int main(void) {
+  struct cr_memexcl_s x = {PTHREAD_MUTEX_INITIALIZER, NULL};
+  cri_memexcl_add(&x, 0, 0xfff0);
+  dump(&x);
+  cri_memexcl_add(&x, 4, 0xffff);
+  dump(&x);
+  cri_memexcl_add(&x, 0x30000, 0x3ffff);
+  dump(&x);
+  cri_memexcl_add(&x, 0x20000, 0x2ffff);
+  dump(&x);
+  cri_memexcl_add(&x, 0x10000, 0x1ffff);
+printf("expect nil -> 0x3ffff\n");
+  dump(&x);
+
+printf("expect 20000 -> 0x3ffff\n");
+  cri_memexcl_del(&x, 0x0, 0x1ffff);
+  dump(&x);
+printf("expect 20000 -> 0x30000\n");
+  cri_memexcl_del(&x, 0x30001, 0x40000);
+  dump(&x);
+printf("expect 20000 -> 0x20332, 0x20667 -> 0x30000\n");
+  cri_memexcl_del(&x, 0x20333, 0x20666);
+  dump(&x);
+
+
+  cri_memexcl_add(&x, 0x40000, 0x10000000);
+cri_memexcl_pack(NULL, &x);
+
+  return 0;
+}
+#endif
+
+
Index: libcr/cr_private.h
===================================================================
RCS file: /var/local/cvs/lbnl_cr/libcr/cr_private.h,v
retrieving revision 1.107.4.4
diff -u -r1.107.4.4 cr_private.h
--- libcr/cr_private.h	21 Dec 2012 07:21:25 -0000	1.107.4.4
+++ libcr/cr_private.h	3 Dec 2013 21:04:39 -0000
@@ -140,6 +140,11 @@
 extern cri_atomic_t cri_hold_init;	// GLOBAL
 extern cri_atomic_t cri_hold_uninit;	// GLOBAL
 
+// For efficient page arithmetic
+extern int cri_pagesize;		// GLOBAL  bytes per page
+extern int cri_pageshift;		// GLOBAL  log_2(bytes per page)
+extern uintptr_t cri_pagemask;		// GLOBAL  mask for page-aligned bits
+
 // Table of hooks and a macro to invoke them
 extern volatile cr_hook_fn_t cri_hook_tbl[CR_NUM_HOOKS];	// GLOBAL
 #if CRI_DEBUG
